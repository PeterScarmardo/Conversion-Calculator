/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ConversionCalculator;

/**
 *
 * @author xxb00mh0werxx
 */
public class ConversionCalculatorWeight extends javax.swing.JFrame {

    /**
     * Creates new form ConversionCalculatorWeight
     */
    public ConversionCalculatorWeight() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        weightTypeFromSpinner = new javax.swing.JSpinner();
        weightTypeToSpinner = new javax.swing.JSpinner();
        weightQuantityTextField = new javax.swing.JTextField();
        weightResultTextField = new javax.swing.JTextField();
        weightTypeFromLabel = new javax.swing.JLabel();
        weightTypeToLabel = new javax.swing.JLabel();
        weightQuantityLabel = new javax.swing.JLabel();
        weightResultLabel = new javax.swing.JLabel();
        weightClearButton = new javax.swing.JButton();
        weightConvertButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        weightTypeFromSpinner.setModel(new javax.swing.SpinnerListModel(new String[] {"Milligrams", "Grams", "Ounces", "Pounds", "Kilograms", "Metric Tons", "US Tons", "Imperial Tons"}));

        weightTypeToSpinner.setModel(new javax.swing.SpinnerListModel(new String[] {"Milligrams", "Grams", "Ounces", "Pounds", "Kilograms", "Metric Tons", "US Tons", "Imperial Tons"}));

        weightTypeFromLabel.setText("What would you like to convert from?");

        weightTypeToLabel.setText("What would you like to convert to?");

        weightQuantityLabel.setText("Enter Quantity for Conversion:");

        weightResultLabel.setText("Result:");

        weightClearButton.setText("Clear");
        weightClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weightClearButtonActionPerformed(evt);
            }
        });

        weightConvertButton.setText("Convert");
        weightConvertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weightConvertButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(weightQuantityLabel)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(weightTypeToLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(weightTypeFromLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(weightResultLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(weightConvertButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(weightClearButton)))
                        .addGap(51, 51, 51)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(weightTypeFromSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                    .addComponent(weightTypeToSpinner)
                    .addComponent(weightQuantityTextField)
                    .addComponent(weightResultTextField))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weightTypeFromSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weightTypeFromLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weightTypeToSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weightTypeToLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weightQuantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weightQuantityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weightResultTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weightResultLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weightClearButton)
                    .addComponent(weightConvertButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void weightClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weightClearButtonActionPerformed
        // TODO add your handling code here:
        
        weightQuantityTextField.setText("");
        weightResultTextField.setText("");
    }//GEN-LAST:event_weightClearButtonActionPerformed

    private void weightConvertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weightConvertButtonActionPerformed
        // TODO add your handling code here:
        
        String weightFromCurrent = (String)(weightTypeFromSpinner.getValue());
        
        if (weightFromCurrent.equals("Milligrams")) {
            
            String weightToCurrent = (String)(weightTypeToSpinner.getValue());
            
            if (weightToCurrent.equals("Grams")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 0.001);
                weightResultTextField.setText(weightQuantity + " Grams");
            }
            
            if (weightToCurrent.equals("Ounces")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 3.5274e-5);
                weightResultTextField.setText(weightQuantity + " Ounces");
            }
            
            if (weightToCurrent.equals("Pounds")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 2.2046e-6);
                weightResultTextField.setText(weightQuantity + " Pounds");
            }
            
            if (weightToCurrent.equals("Kilograms")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 1e-6);
                weightResultTextField.setText(weightQuantity + " Kilograms");
            }
            
            if (weightToCurrent.equals("Metric Tons")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 1e-9);
                weightResultTextField.setText(weightQuantity + " Metric Tons");
            }
            
            if (weightToCurrent.equals("US Tons")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 1.1023e-9);
                weightResultTextField.setText(weightQuantity + " US Tons");
            }
            
            if (weightToCurrent.equals("Imperial Tons")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 9.8421e-10);
                weightResultTextField.setText(weightQuantity + " Imperial Tons");
            }
        }
        
        if (weightFromCurrent.equals("Grams")) {
            
            String weightToCurrent = (String)(weightTypeToSpinner.getValue());
            
            if (weightToCurrent.equals("Milligrams")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 1000);
                weightResultTextField.setText(weightQuantity + " Milligrams");
            }
            
            if (weightToCurrent.equals("Ounces")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 0.035274);
                weightResultTextField.setText(weightQuantity + " Ounces");
            }
            
            if (weightToCurrent.equals("Pounds")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 0.00220462);
                weightResultTextField.setText(weightQuantity + " Pounds");
            }
            
            if (weightToCurrent.equals("Kilograms")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 0.001);
                weightResultTextField.setText(weightQuantity + " Kilograms");
            }
            
            if (weightToCurrent.equals("Metric Tons")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 1e-6);
                weightResultTextField.setText(weightQuantity + " Metric Tons");
            }
            
            if (weightToCurrent.equals("US Tons")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 1.1023e-6);
                weightResultTextField.setText(weightQuantity + " US Tons");
            }
            
            if (weightToCurrent.equals("Imperial Tons")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 9.8421e-7);
                weightResultTextField.setText(weightQuantity + " Imperial Tons");
            }
        }
        
        if (weightFromCurrent.equals("Ounces")) {
            
            String weightToCurrent = (String)(weightTypeToSpinner.getValue());
            
            if (weightToCurrent.equals("Milligrams")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 28349.5);
                weightResultTextField.setText(weightQuantity + " Milligrams");
            }
            
            if (weightToCurrent.equals("Grams")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 28.3495);
                weightResultTextField.setText(weightQuantity + " Grams");
            }
            
            if (weightToCurrent.equals("Pounds")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 0.0625);
                weightResultTextField.setText(weightQuantity + " Pounds");
            }
            
            if (weightToCurrent.equals("Kilograms")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 0.0283495);
                weightResultTextField.setText(weightQuantity + " Kilograms");
            }
            
            if (weightToCurrent.equals("Metric Tons")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 2.835e-5);
                weightResultTextField.setText(weightQuantity + " Metric Tons");
            }
            
            if (weightToCurrent.equals("US Tons")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 3.125e-5);
                weightResultTextField.setText(weightQuantity + " US Tons");
            }
            
            if (weightToCurrent.equals("Imperial Tons")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 2.7902e-5);
                weightResultTextField.setText(weightQuantity + " Imperial Tons");
            }
        }
        
        if (weightFromCurrent.equals("Pounds")) {
            
            String weightToCurrent = (String)(weightTypeToSpinner.getValue());
            
            if (weightToCurrent.equals("Milligrams")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 453592);
                weightResultTextField.setText(weightQuantity + " Milligrams");
            }
            
            if (weightToCurrent.equals("Grams")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 453.592);
                weightResultTextField.setText(weightQuantity + " Grams");
            }
            
            if (weightToCurrent.equals("Ounces")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 16);
                weightResultTextField.setText(weightQuantity + " Ounces");
            }
            
            if (weightToCurrent.equals("Kilograms")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 0.453592);
                weightResultTextField.setText(weightQuantity + " Kilograms");
            }
            
            if (weightToCurrent.equals("Metric Tons")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 0.000453592);
                weightResultTextField.setText(weightQuantity + " Metric Tons");
            }
            
            if (weightToCurrent.equals("US Tons")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 0.0005);
                weightResultTextField.setText(weightQuantity + " US Tons");
            }
            
            if (weightToCurrent.equals("Imperial Tons")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 0.000446429);
                weightResultTextField.setText(weightQuantity + " Imperial Tons");
            }
        }
        
        if (weightFromCurrent.equals("Kilograms")) {
            
            String weightToCurrent = (String)(weightTypeToSpinner.getValue());
            
            if (weightToCurrent.equals("Milligrams")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 1e+6);
                weightResultTextField.setText(weightQuantity + " Milligrams");
            }
            
            if (weightToCurrent.equals("Grams")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 1000);
                weightResultTextField.setText(weightQuantity + " Grams");
            }
            
            if (weightToCurrent.equals("Ounces")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 35.274);
                weightResultTextField.setText(weightQuantity + " Ounces");
            }
            
            if (weightToCurrent.equals("Pounds")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 2.20462);
                weightResultTextField.setText(weightQuantity + " Pounds");
            }
            
            if (weightToCurrent.equals("Metric Tons")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 0.001);
                weightResultTextField.setText(weightQuantity + " Metric Tons");
            }
            
            if (weightToCurrent.equals("US Tons")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 0.00110231);
                weightResultTextField.setText(weightQuantity + " US Tons");
            }
            
            if (weightToCurrent.equals("Imperial Tons")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 0.000984207);
                weightResultTextField.setText(weightQuantity + " Imperial Tons");
            }
        }
        
        if (weightFromCurrent.equals("Metric Tons")) {
            
            String weightToCurrent = (String)(weightTypeToSpinner.getValue());
            
            if (weightToCurrent.equals("Milligrams")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 1e+9);
                weightResultTextField.setText(weightQuantity + " Milligrams");
            }
            
            if (weightToCurrent.equals("Grams")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 1e+6);
                weightResultTextField.setText(weightQuantity + " Grams");
            }
            
            if (weightToCurrent.equals("Ounces")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 35274);
                weightResultTextField.setText(weightQuantity + " Ounces");
            }
            
            if (weightToCurrent.equals("Pounds")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 2204.62);
                weightResultTextField.setText(weightQuantity + " Pounds");
            }
            
            if (weightToCurrent.equals("Kilograms")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 1000);
                weightResultTextField.setText(weightQuantity + " Kilograms");
            }
            
            if (weightToCurrent.equals("US Tons")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 1.10231);
                weightResultTextField.setText(weightQuantity + " US Tons");
            }
            
            if (weightToCurrent.equals("Imperial Tons")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 0.984207);
                weightResultTextField.setText(weightQuantity + " Imperial Tons");
            }
        }
        
        if (weightFromCurrent.equals("US Tons")) {
            
            String weightToCurrent = (String)(weightTypeToSpinner.getValue());
            
            if (weightToCurrent.equals("Milligrams")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 9.072e+8);
                weightResultTextField.setText(weightQuantity + " Milligrams");
            }
            
            if (weightToCurrent.equals("Grams")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 907185);
                weightResultTextField.setText(weightQuantity + " Grams");
            }
            
            if (weightToCurrent.equals("Ounces")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 32000);
                weightResultTextField.setText(weightQuantity + " Ounces");
            }
            
            if (weightToCurrent.equals("Pounds")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 2000);
                weightResultTextField.setText(weightQuantity + " Pounds");
            }
            
            if (weightToCurrent.equals("Kilograms")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 907.185);
                weightResultTextField.setText(weightQuantity + " Kilograms");
            }
            
            if (weightToCurrent.equals("Metric Tons")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * .907185);
                weightResultTextField.setText(weightQuantity + " Metric Tons");
            }
            
            if (weightToCurrent.equals("Imperial Tons")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 0.892857);
                weightResultTextField.setText(weightQuantity + " Imperial Tons");
            }
        }
        
        if (weightFromCurrent.equals("Imperial Tons")) {
            
            String weightToCurrent = (String)(weightTypeToSpinner.getValue());
            
            if (weightToCurrent.equals("Milligrams")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 1.016e+9);
                weightResultTextField.setText(weightQuantity + " Milligrams");
            }
            
            if (weightToCurrent.equals("Grams")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 1.016e+6);
                weightResultTextField.setText(weightQuantity + " Grams");
            }
            
            if (weightToCurrent.equals("Ounces")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 35840);
                weightResultTextField.setText(weightQuantity + " Ounces");
            }
            
            if (weightToCurrent.equals("Pounds")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 2240);
                weightResultTextField.setText(weightQuantity + " Pounds");
            }
            
            if (weightToCurrent.equals("Kilograms")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 1016.05);
                weightResultTextField.setText(weightQuantity + " Kilograms");
            }
            
            if (weightToCurrent.equals("Metric Tons")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 1.01605);
                weightResultTextField.setText(weightQuantity + " Metric Tons");
            }
            
            if (weightToCurrent.equals("US Tons")) {
                double weightQuantity = (double)((Double.parseDouble(weightQuantityTextField.getText()))
                        * 1.12);
                weightResultTextField.setText(weightQuantity + " US Tons");
            }
        }
    }//GEN-LAST:event_weightConvertButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConversionCalculatorWeight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConversionCalculatorWeight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConversionCalculatorWeight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConversionCalculatorWeight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConversionCalculatorWeight().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton weightClearButton;
    private javax.swing.JButton weightConvertButton;
    private javax.swing.JLabel weightQuantityLabel;
    private javax.swing.JTextField weightQuantityTextField;
    private javax.swing.JLabel weightResultLabel;
    private javax.swing.JTextField weightResultTextField;
    private javax.swing.JLabel weightTypeFromLabel;
    private javax.swing.JSpinner weightTypeFromSpinner;
    private javax.swing.JLabel weightTypeToLabel;
    private javax.swing.JSpinner weightTypeToSpinner;
    // End of variables declaration//GEN-END:variables
}
