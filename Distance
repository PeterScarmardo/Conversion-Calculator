/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
 
package ConversionCalculator;

/**
 *
 * @author xxb00mh0werxx
 */
 
public class ConversionCalculatorDistance extends javax.swing.JFrame {

    /**
     * Creates new form ConversionCalculatorDistance
     */
    public ConversionCalculatorDistance() {
        initComponents();
                
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        distanceTypeFromLabel = new javax.swing.JLabel();
        distanceTypeFromSpinner = new javax.swing.JSpinner();
        distanceTypeToLabel = new javax.swing.JLabel();
        distanceTypeToSpinner = new javax.swing.JSpinner();
        distanceQuantityLabel = new javax.swing.JLabel();
        distanceQuantityTextField = new javax.swing.JTextField();
        distanceResultLabel = new javax.swing.JLabel();
        distanceResultTextField = new javax.swing.JTextField();
        distanceClearButton = new javax.swing.JButton();
        distanceConvertButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        distanceTypeFromLabel.setText("What would you like to convert from?");

        distanceTypeFromSpinner.setModel(new javax.swing.SpinnerListModel(new String[] {"Nanometers", "Micrometers", "Millimeters", "Centimeters", "Inches", "Feet", "Yards", "Meters", "Kilometers", "Miles", "Nautical Miles"}));
        distanceTypeFromSpinner.setAutoscrolls(true);

        distanceTypeToLabel.setText("What would you like to convert to?");
        distanceTypeToLabel.setAutoscrolls(true);

        distanceTypeToSpinner.setModel(new javax.swing.SpinnerListModel(new String[] {"Nanometers", "Micrometers", "Millimeters", "Centimeters", "Inches", "Feet", "Yards", "Meters", "Kilometers", "Miles", "Nautical Miles"}));
        distanceTypeToSpinner.setAutoscrolls(true);

        distanceQuantityLabel.setText("Enter quantity for conversion:");

        distanceResultLabel.setText("Result:");

        distanceClearButton.setText("Clear");
        distanceClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distanceClearButtonActionPerformed(evt);
            }
        });

        distanceConvertButton.setText("Convert");
        distanceConvertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distanceConvertButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(distanceQuantityLabel)
                            .addComponent(distanceTypeToLabel)
                            .addComponent(distanceResultLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(distanceConvertButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(distanceClearButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(distanceTypeFromLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(distanceTypeFromSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                    .addComponent(distanceResultTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                    .addComponent(distanceQuantityTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                    .addComponent(distanceTypeToSpinner, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(distanceTypeFromLabel)
                    .addComponent(distanceTypeFromSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(distanceTypeToSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(distanceTypeToLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(distanceQuantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(distanceQuantityLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(distanceResultLabel)
                    .addComponent(distanceResultTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(distanceClearButton)
                    .addComponent(distanceConvertButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void distanceConvertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distanceConvertButtonActionPerformed
        // TODO add your handling code here:
        
        String distanceFromCurrent = (String)(distanceTypeFromSpinner.getValue());
        
        if (distanceFromCurrent.equals("Nanometers")) {
            
            String distanceToCurrent = (String)(distanceTypeToSpinner.getValue());
            
            if (distanceToCurrent.equals("Micrometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.001);
                distanceResultTextField.setText(distanceQuantity + " Micrometers");
            }
            
            if (distanceToCurrent.equals("Millimeters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1e-6);
                distanceResultTextField.setText(distanceQuantity + " Millimeters");
            }
            
            if (distanceToCurrent.equals("Centimeters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1e-7);
                distanceResultTextField.setText(distanceQuantity + " Centimeters");
            }
            
            if (distanceToCurrent.equals("Inches")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 3.937e-8);
                distanceResultTextField.setText(distanceQuantity + " Inches");
            }
            
            if (distanceToCurrent.equals("Feet")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 3.2808e-9);
                distanceResultTextField.setText(distanceQuantity + " Feet");
            }
            
            if (distanceToCurrent.equals("Yards")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1.0936e-9);
                distanceResultTextField.setText(distanceQuantity + " Yards");
            }
            
            if (distanceToCurrent.equals("Meters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1e-9);
                distanceResultTextField.setText(distanceQuantity + " Meters");
            }
            
            if (distanceToCurrent.equals("Kilometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1e-12);
                distanceResultTextField.setText(distanceQuantity + " Kilometers");
            }
            
            if (distanceToCurrent.equals("Miles")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 6.2137e-13);
                distanceResultTextField.setText(distanceQuantity + " Miles");
            }
            
            if (distanceToCurrent.equals("Nautical Miles")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 5.3996e-13);
                distanceResultTextField.setText(distanceQuantity + " Nautical Miles");
            }
        }
        
        if (distanceFromCurrent.equals("Micrometers")) {
            
            String distanceToCurrent = (String)(distanceTypeToSpinner.getValue());
            
            if (distanceToCurrent.equals("Nanometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1000);
                distanceResultTextField.setText(distanceQuantity + " Nanometers");
            }
            
            if (distanceToCurrent.equals("Millimeters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.001);
                distanceResultTextField.setText(distanceQuantity + " Millimeters");
            }
            
            if (distanceToCurrent.equals("Centimeters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1e-4);
                distanceResultTextField.setText(distanceQuantity + " Centimeters");
            }
            
            if (distanceToCurrent.equals("Inches")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 3.937e-5);
                distanceResultTextField.setText(distanceQuantity + " Inches");
            }
            
            if (distanceToCurrent.equals("Feet")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 3.2808e-6);
                distanceResultTextField.setText(distanceQuantity + " Feet");
            }
            
            if (distanceToCurrent.equals("Yards")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1.0936e-6);
                distanceResultTextField.setText(distanceQuantity + " Yards");
            }
            
            if (distanceToCurrent.equals("Meters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1e-6);
                distanceResultTextField.setText(distanceQuantity + " Meters");
            }
            
            if (distanceToCurrent.equals("Kilometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1e-9);
                distanceResultTextField.setText(distanceQuantity + " Kilometers");
            }
            
            if (distanceToCurrent.equals("Miles")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 6.2137e-10);
                distanceResultTextField.setText(distanceQuantity + " Miles");
            }
            
            if (distanceToCurrent.equals("Nautical Miles")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 5.3996e-10);
                distanceResultTextField.setText(distanceQuantity + " Nautical Miles");
            }
        }
        
        if (distanceFromCurrent.equals("Millimeters")) {
            
            String distanceToCurrent = (String)(distanceTypeToSpinner.getValue());
            
            if (distanceToCurrent.equals("Nanometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1e+6);
                distanceResultTextField.setText(distanceQuantity + " Nanometers");
            }
            
            if (distanceToCurrent.equals("Micrometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1000);
                distanceResultTextField.setText(distanceQuantity + " Micrometers");
            }
            
            if (distanceToCurrent.equals("Centimeters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.1);
                distanceResultTextField.setText(distanceQuantity + " Centimeters");
            }
            
            if (distanceToCurrent.equals("Inches")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.0393701);
                distanceResultTextField.setText(distanceQuantity + " Inches");
            }
            
            if (distanceToCurrent.equals("Feet")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.00328084);
                distanceResultTextField.setText(distanceQuantity + " Feet");
            }
            
            if (distanceToCurrent.equals("Yards")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.00109361);
                distanceResultTextField.setText(distanceQuantity + " Yards");
            }
            
            if (distanceToCurrent.equals("Meters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.001);
                distanceResultTextField.setText(distanceQuantity + " Meters");
            }
            
            if (distanceToCurrent.equals("Kilometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1e-6);
                distanceResultTextField.setText(distanceQuantity + " Kilometers");
            }
            
            if (distanceToCurrent.equals("Miles")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 6.2137e-7);
                distanceResultTextField.setText(distanceQuantity + " Miles");
            }
            
            if (distanceToCurrent.equals("Nautical Miles")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 5.3996e-7);
                distanceResultTextField.setText(distanceQuantity + " Nautical Miles");
            }
        }
        
        if (distanceFromCurrent.equals("Centimeters")) {
            
            String distanceToCurrent = (String)(distanceTypeToSpinner.getValue());
            
            if (distanceToCurrent.equals("Nanometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1e+7);
                distanceResultTextField.setText(distanceQuantity + " Nanometers");
            }
            
            if (distanceToCurrent.equals("Micrometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 10000);
                distanceResultTextField.setText(distanceQuantity + " Micrometers");
            }
            
            if (distanceToCurrent.equals("Millimeters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 10);
                distanceResultTextField.setText(distanceQuantity + " Millimeters");
            }
            
            if (distanceToCurrent.equals("Inches")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.393701);
                distanceResultTextField.setText(distanceQuantity + " Inches");
            }
            
            if (distanceToCurrent.equals("Feet")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.0328084);
                distanceResultTextField.setText(distanceQuantity + " Feet");
            }
            
            if (distanceToCurrent.equals("Yards")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.0109361);
                distanceResultTextField.setText(distanceQuantity + " Yards");
            }
            
            if (distanceToCurrent.equals("Meters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.01);
                distanceResultTextField.setText(distanceQuantity + " Meters");
            }
            
            if (distanceToCurrent.equals("Kilometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1e-5);
                distanceResultTextField.setText(distanceQuantity + " Kilometers");
            }
            
            if (distanceToCurrent.equals("Miles")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 6.2137e-6);
                distanceResultTextField.setText(distanceQuantity + " Miles");
            }
            
            if (distanceToCurrent.equals("Nautical Miles")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 5.3996e-7);
                distanceResultTextField.setText(distanceQuantity + " Nautical Miles");
            }
        }
        
        if (distanceFromCurrent.equals("Inches")) {
            
            String distanceToCurrent = (String)(distanceTypeToSpinner.getValue());
            
            if (distanceToCurrent.equals("Nanometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 2.54e+7);
                distanceResultTextField.setText(distanceQuantity + " Nanometers");
            }
            
            if (distanceToCurrent.equals("Micrometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 25400);
                distanceResultTextField.setText(distanceQuantity + " Micrometers");
            }
            
            if (distanceToCurrent.equals("Millimeters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 25.4);
                distanceResultTextField.setText(distanceQuantity + " Millimeters");
            }
            
            if (distanceToCurrent.equals("Centimeters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 2.54);
                distanceResultTextField.setText(distanceQuantity + " Centimeters");
            }
            
            if (distanceToCurrent.equals("Feet")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.0833333);
                distanceResultTextField.setText(distanceQuantity + " Feet");
            }
            
            if (distanceToCurrent.equals("Yards")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.0277778);
                distanceResultTextField.setText(distanceQuantity + " Yards");
            }
            
            if (distanceToCurrent.equals("Meters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.0254);
                distanceResultTextField.setText(distanceQuantity + " Meters");
            }
            
            if (distanceToCurrent.equals("Kilometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 2.54e-5);
                distanceResultTextField.setText(distanceQuantity + " Kilometers");
            }
            
            if (distanceToCurrent.equals("Miles")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1.5783e-5);
                distanceResultTextField.setText(distanceQuantity + " Miles");
            }
            
            if (distanceToCurrent.equals("Nautical Miles")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1.3715e-5);
                distanceResultTextField.setText(distanceQuantity + " Nautical Miles");
            }
        }
        
        if (distanceFromCurrent.equals("Feet")) {
            
            String distanceToCurrent = (String)(distanceTypeToSpinner.getValue());
            
            if (distanceToCurrent.equals("Nanometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 3.048e+8);
                distanceResultTextField.setText(distanceQuantity + " Nanometers");
            }
            
            if (distanceToCurrent.equals("Micrometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 304800);
                distanceResultTextField.setText(distanceQuantity + " Micrometers");
            }
            
            if (distanceToCurrent.equals("Millimeters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 304.8);
                distanceResultTextField.setText(distanceQuantity + " Millimeters");
            }
            
            if (distanceToCurrent.equals("Centimeters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 30.48);
                distanceResultTextField.setText(distanceQuantity + " Centimeters");
            }
            
            if (distanceToCurrent.equals("Inches")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 12);
                distanceResultTextField.setText(distanceQuantity + " Inches");
            }
            
            if (distanceToCurrent.equals("Yards")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.333333);
                distanceResultTextField.setText(distanceQuantity + " Yards");
            }
            
            if (distanceToCurrent.equals("Meters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.3048);
                distanceResultTextField.setText(distanceQuantity + " Meters");
            }
            
            if (distanceToCurrent.equals("Kilometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.0003048);
                distanceResultTextField.setText(distanceQuantity + " Kilometers");
            }
            
            if (distanceToCurrent.equals("Miles")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.000189394);
                distanceResultTextField.setText(distanceQuantity + " Miles");
            }
            
            if (distanceToCurrent.equals("Nautical Miles")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.000164579);
                distanceResultTextField.setText(distanceQuantity + " Nautical Miles");
            }
        }
        
        if (distanceFromCurrent.equals("Yards")) {
            
            String distanceToCurrent = (String)(distanceTypeToSpinner.getValue());
            
            if (distanceToCurrent.equals("Nanometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 9.144e+8);
                distanceResultTextField.setText(distanceQuantity + " Nanometers");
            }
            
            if (distanceToCurrent.equals("Micrometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 914400);
                distanceResultTextField.setText(distanceQuantity + " Micrometers");
            }
            
            if (distanceToCurrent.equals("Millimeters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 914.4);
                distanceResultTextField.setText(distanceQuantity + " Millimeters");
            }
            
            if (distanceToCurrent.equals("Centimeters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 91.44);
                distanceResultTextField.setText(distanceQuantity + " Centimeters");
            }
            
            if (distanceToCurrent.equals("Inches")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 36);
                distanceResultTextField.setText(distanceQuantity + " Inches");
            }
            
            if (distanceToCurrent.equals("Feet")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 3);
                distanceResultTextField.setText(distanceQuantity + " Feet");
            }
            
            if (distanceToCurrent.equals("Meters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.9144);
                distanceResultTextField.setText(distanceQuantity + " Meters");
            }
            
            if (distanceToCurrent.equals("Kilometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.0009144);
                distanceResultTextField.setText(distanceQuantity + " Kilometers");
            }
            
            if (distanceToCurrent.equals("Miles")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.000568182);
                distanceResultTextField.setText(distanceQuantity + " Miles");
            }
            
            if (distanceToCurrent.equals("Nautical Miles")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.000493737);
                distanceResultTextField.setText(distanceQuantity + " Nautical Miles");
            }
        }
        
        if (distanceFromCurrent.equals("Meters")) {
            
            String distanceToCurrent = (String)(distanceTypeToSpinner.getValue());
            
            if (distanceToCurrent.equals("Nanometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1e+9);
                distanceResultTextField.setText(distanceQuantity + " Nanometers");
            }
            
            if (distanceToCurrent.equals("Micrometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1e+6);
                distanceResultTextField.setText(distanceQuantity + " Micrometers");
            }
            
            if (distanceToCurrent.equals("Millimeters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1000);
                distanceResultTextField.setText(distanceQuantity + " Millimeters");
            }
            
            if (distanceToCurrent.equals("Centimeters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 100);
                distanceResultTextField.setText(distanceQuantity + " Centimeters");
            }
            
            if (distanceToCurrent.equals("Inches")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 39.3701);
                distanceResultTextField.setText(distanceQuantity + " Inches");
            }
            
            if (distanceToCurrent.equals("Feet")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 3.28084);
                distanceResultTextField.setText(distanceQuantity + " Feet");
            }
            
            if (distanceToCurrent.equals("Yards")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1.09361);
                distanceResultTextField.setText(distanceQuantity + " Yards");
            }
            
            if (distanceToCurrent.equals("Kilometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.001);
                distanceResultTextField.setText(distanceQuantity + " Kilometers");
            }
            
            if (distanceToCurrent.equals("Miles")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.000621371);
                distanceResultTextField.setText(distanceQuantity + " Miles");
            }
            
            if (distanceToCurrent.equals("Nautical Miles")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.000539957);
                distanceResultTextField.setText(distanceQuantity + " Nautical Miles");
            }
        }
        
        if (distanceFromCurrent.equals("Kilometers")) {
            
            String distanceToCurrent = (String)(distanceTypeToSpinner.getValue());
            
            if (distanceToCurrent.equals("Nanometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1e+12);
                distanceResultTextField.setText(distanceQuantity + " Nanometers");
            }
            
            if (distanceToCurrent.equals("Micrometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1e+9);
                distanceResultTextField.setText(distanceQuantity + " Micrometers");
            }
            
            if (distanceToCurrent.equals("Millimeters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1e+6);
                distanceResultTextField.setText(distanceQuantity + " Millimeters");
            }
            
            if (distanceToCurrent.equals("Centimeters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 100000);
                distanceResultTextField.setText(distanceQuantity + " Centimeters");
            }
            
            if (distanceToCurrent.equals("Inches")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 39370.1);
                distanceResultTextField.setText(distanceQuantity + " Inches");
            }
            
            if (distanceToCurrent.equals("Feet")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 3280.84);
                distanceResultTextField.setText(distanceQuantity + " Feet");
            }
            
            if (distanceToCurrent.equals("Yards")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1093.61);
                distanceResultTextField.setText(distanceQuantity + " Yards");
            }
            
            if (distanceToCurrent.equals("Meters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1000);
                distanceResultTextField.setText(distanceQuantity + " Meters");
            }
            
            if (distanceToCurrent.equals("Miles")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.621371);
                distanceResultTextField.setText(distanceQuantity + " Miles");
            }
            
            if (distanceToCurrent.equals("Nautical Miles")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.539957);
                distanceResultTextField.setText(distanceQuantity + " Nautical Miles");
            }
        }
        
        if (distanceFromCurrent.equals("Miles")) {
            
            String distanceToCurrent = (String)(distanceTypeToSpinner.getValue());
            
            if (distanceToCurrent.equals("Nanometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1.609e+12);
                distanceResultTextField.setText(distanceQuantity + " Nanometers");
            }
            
            if (distanceToCurrent.equals("Micrometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1.609e+9);
                distanceResultTextField.setText(distanceQuantity + " Micrometers");
            }
            
            if (distanceToCurrent.equals("Millimeters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1.609e+6);
                distanceResultTextField.setText(distanceQuantity + " Millimeters");
            }
            
            if (distanceToCurrent.equals("Centimeters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 160934);
                distanceResultTextField.setText(distanceQuantity + " Centimeters");
            }
            
            if (distanceToCurrent.equals("Inches")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 63360);
                distanceResultTextField.setText(distanceQuantity + " Inches");
            }
            
            if (distanceToCurrent.equals("Feet")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 5280);
                distanceResultTextField.setText(distanceQuantity + " Feet");
            }
            
            if (distanceToCurrent.equals("Yards")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1760);
                distanceResultTextField.setText(distanceQuantity + " Yards");
            }
            
            if (distanceToCurrent.equals("Meters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1609.34);
                distanceResultTextField.setText(distanceQuantity + " Meters");
            }
            
            if (distanceToCurrent.equals("Kilometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1.60934);
                distanceResultTextField.setText(distanceQuantity + " Kilometers");
            }
            
            if (distanceToCurrent.equals("Nautical Miles")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 0.868976);
                distanceResultTextField.setText(distanceQuantity + " Nautical Miles");
            }
        }
        
        if (distanceFromCurrent.equals("Nautical Miles")) {
            
            String distanceToCurrent = (String)(distanceTypeToSpinner.getValue());
            
            if (distanceToCurrent.equals("Nanometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1.852e+12);
                distanceResultTextField.setText(distanceQuantity + " Nanometers");
            }
            
            if (distanceToCurrent.equals("Micrometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1.852e+9);
                distanceResultTextField.setText(distanceQuantity + " Micrometers");
            }
            
            if (distanceToCurrent.equals("Millimeters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1.852e+6);
                distanceResultTextField.setText(distanceQuantity + " Millimeters");
            }
            
            if (distanceToCurrent.equals("Centimeters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 185200);
                distanceResultTextField.setText(distanceQuantity + " Centimeters");
            }
            
            if (distanceToCurrent.equals("Inches")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 72913.4);
                distanceResultTextField.setText(distanceQuantity + " Inches");
            }
            
            if (distanceToCurrent.equals("Feet")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 6076.12);
                distanceResultTextField.setText(distanceQuantity + " Feet");
            }
            
            if (distanceToCurrent.equals("Yards")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 2025.37);
                distanceResultTextField.setText(distanceQuantity + " Yards");
            }
            
            if (distanceToCurrent.equals("Meters")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1852);
                distanceResultTextField.setText(distanceQuantity + " Meters");
            }
            
            if (distanceToCurrent.equals("Kilometers")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1.852);
                distanceResultTextField.setText(distanceQuantity + " Kilometers");
            }
            
            if (distanceToCurrent.equals("Miles")) {
                double distanceQuantity = (double)((Double.parseDouble(distanceQuantityTextField.getText()))
                        * 1.15078);
                distanceResultTextField.setText(distanceQuantity + " Miles");
            }
        }
    }//GEN-LAST:event_distanceConvertButtonActionPerformed

    private void distanceClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distanceClearButtonActionPerformed
        // TODO add your handling code here:
        
        distanceQuantityTextField.setText("");
        distanceResultTextField.setText("");
    }//GEN-LAST:event_distanceClearButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConversionCalculatorDistance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConversionCalculatorDistance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConversionCalculatorDistance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConversionCalculatorDistance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConversionCalculatorDistance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton distanceClearButton;
    private javax.swing.JButton distanceConvertButton;
    private javax.swing.JLabel distanceQuantityLabel;
    private javax.swing.JTextField distanceQuantityTextField;
    private javax.swing.JLabel distanceResultLabel;
    private javax.swing.JTextField distanceResultTextField;
    private javax.swing.JLabel distanceTypeFromLabel;
    private javax.swing.JSpinner distanceTypeFromSpinner;
    private javax.swing.JLabel distanceTypeToLabel;
    private javax.swing.JSpinner distanceTypeToSpinner;
    // End of variables declaration//GEN-END:variables
}
